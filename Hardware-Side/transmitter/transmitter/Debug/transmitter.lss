
transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c78  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000801  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000508  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8a:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <start_conversion>:
 */ 
#include "dht11.h"
#include <util/delay.h>
void start_conversion()
{
    DDRA|=(1<<PINA0);//this will make pinA0 as output
  92:	d0 9a       	sbi	0x1a, 0	; 26
	inputport &=~(1<<PINA0);//this will make output low along with delay for than 18 ms
  94:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	87 e2       	ldi	r24, 0x27	; 39
  98:	93 e2       	ldi	r25, 0x23	; 35
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <start_conversion+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <start_conversion+0xe>
  a0:	00 00       	nop
	_delay_ms(18);
	inputport |=(1<<PINA0);//this is responsible for making output of PINA0 high
  a2:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	9d e0       	ldi	r25, 0x0D	; 13
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <start_conversion+0x14>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <response>:
	_delay_us(20);
}
void response()
{
	DDRA &=~(1<<PINA0);//this is responsible for making PinA0 input pin
  ae:	d0 98       	cbi	0x1a, 0	; 26
	PORTA|=(1<<PINA0);//this is making pinA0 internally high
  b0:	d8 9a       	sbi	0x1b, 0	; 27
	while(PINA&0x01);//loop until pinA0 goes low
  b2:	c8 99       	sbic	0x19, 0	; 25
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <response+0x4>
	while ( !(PINA&0X01));//loop until PinA0 goes high
  b6:	c8 9b       	sbis	0x19, 0	; 25
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <response+0x8>
	while(PINA&0x01);//loop until pinA0 goes low
  ba:	c8 99       	sbic	0x19, 0	; 25
  bc:	fe cf       	rjmp	.-4      	; 0xba <response+0xc>
}
  be:	08 95       	ret

000000c0 <receiving_data>:
uint8_t receiving_data()
{
  c0:	98 e0       	ldi	r25, 0x08	; 8
	char i;
	uint8_t data=0x00;//responsible for storing 8 bit data
  c2:	80 e0       	ldi	r24, 0x00	; 0
	for (i=0;i<8;i++)
	{
		while (!(PINA&0x01));//wait until signal coming in pinA0 is low
  c4:	c8 9b       	sbis	0x19, 0	; 25
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <receiving_data+0x4>
  c8:	26 e1       	ldi	r18, 0x16	; 22
  ca:	2a 95       	dec	r18
  cc:	f1 f7       	brne	.-4      	; 0xca <receiving_data+0xa>
		_delay_us(33);//wait for 33 us as for logical zero signal is high for around 28 us and for logical one it is high for around 70 us
		if(PINA&0x01)//if signal is still high after 33 us then set last bit of data high by left shifting it
  ce:	c8 9b       	sbis	0x19, 0	; 25
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <receiving_data+0x18>
		{
			data=(data<<1)|0x01;
  d2:	88 0f       	add	r24, r24
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <receiving_data+0x1a>
		}
		else
		{
			data=(data<<1)&0xfe; 
  d8:	88 0f       	add	r24, r24
		}
		while(PINA&0x01);//wait until signal goes low
  da:	c8 99       	sbic	0x19, 0	; 25
  dc:	fe cf       	rjmp	.-4      	; 0xda <receiving_data+0x1a>
  de:	91 50       	subi	r25, 0x01	; 1
}
uint8_t receiving_data()
{
	char i;
	uint8_t data=0x00;//responsible for storing 8 bit data
	for (i=0;i<8;i++)
  e0:	89 f7       	brne	.-30     	; 0xc4 <receiving_data+0x4>
			data=(data<<1)&0xfe; 
		}
		while(PINA&0x01);//wait until signal goes low
	}
	return data;//return 8 bit data
  e2:	08 95       	ret

000000e4 <initiate>:
		}
    }
}
void initiate()
{
	start_conversion();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <start_conversion>
	response();
  e8:	0e 94 57 00 	call	0xae	; 0xae <response>
	humidity=receiving_data();
  ec:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
  f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <humidity>
	humidity1=receiving_data();
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
  f8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <humidity1>
	temperature=receiving_data();
  fc:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 100:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <temperature>
	temperature1=receiving_data();
 104:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <temperature1>
	checksum=receiving_data();
 10c:	0e 94 60 00 	call	0xc0	; 0xc0 <receiving_data>
 110:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <checksum>
	sum=humidity1+humidity+temperature1+temperature;
 114:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <temperature>
 118:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <humidity1>
 11c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <humidity>
 120:	92 0f       	add	r25, r18
 122:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <temperature1>
 126:	92 0f       	add	r25, r18
 128:	93 0f       	add	r25, r19
	if(checksum>sum)
 12a:	98 17       	cp	r25, r24
 12c:	20 f4       	brcc	.+8      	; 0x136 <initiate+0x52>
	{
		sum=checksum-sum;
 12e:	89 1b       	sub	r24, r25
 130:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <sum>
 134:	03 c0       	rjmp	.+6      	; 0x13c <initiate+0x58>
	}
	else
	{
		sum=sum-checksum;
 136:	98 1b       	sub	r25, r24
 138:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <sum>
	}
	if(sum>=0 && sum<=5)
 13c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <sum>
 140:	86 30       	cpi	r24, 0x06	; 6
 142:	18 f4       	brcc	.+6      	; 0x14a <initiate+0x66>
	{
		to_be_send=temperature;
 144:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <__data_end>
 148:	08 95       	ret
	}
	else
	{
		to_be_send=0x00;
 14a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
 14e:	08 95       	ret

00000150 <checksum1>:
}
void checksum1(char send_value)
{
	char lb=(send_value&0x0F);
	char ub=((send_value>>4)&0x0F);
	value_of_sum=ub+lb;
 150:	98 2f       	mov	r25, r24
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	82 95       	swap	r24
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	89 0f       	add	r24, r25
 15a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <value_of_sum>
 15e:	08 95       	ret

00000160 <main>:
uint8_t humidity1=0;
uint8_t checksum=0;
uint8_t sum=0;
uint8_t to_be_send=0;
int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	6d 97       	sbiw	r28, 0x1d	; 29
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
 DDRC=0xFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	84 bb       	out	0x14, r24	; 20
 PORTC|=(1<<4);
 178:	ac 9a       	sbi	0x15, 4	; 21
 DDRA|=(1<<PINA0);
 17a:	d0 9a       	sbi	0x1a, 0	; 26
 PORTA|=(1<<PINA0);
 17c:	d8 9a       	sbi	0x1b, 0	; 27
 char tempr_in_char[3];
char value[26]="peshal nepal is a good boy";
 17e:	8a e1       	ldi	r24, 0x1A	; 26
 180:	e0 e6       	ldi	r30, 0x60	; 96
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	de 01       	movw	r26, r28
 186:	14 96       	adiw	r26, 0x04	; 4
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x28>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 190:	0f 2e       	mov	r0, r31
 192:	fa e0       	ldi	r31, 0x0A	; 10
 194:	ff 2e       	mov	r15, r31
 196:	f0 2d       	mov	r31, r0
 198:	6e 01       	movw	r12, r28
 19a:	2e e1       	ldi	r18, 0x1E	; 30
 19c:	c2 0e       	add	r12, r18
 19e:	d1 1c       	adc	r13, r1
char passon;
    while (1) 
    {
		initiate();
 1a0:	0e 94 72 00 	call	0xe4	; 0xe4 <initiate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	3f e3       	ldi	r19, 0x3F	; 63
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	31 50       	subi	r19, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x4a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x54>
 1b4:	00 00       	nop
 1b6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 1ba:	4f 2d       	mov	r20, r15
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 4e 01 	call	0x29c	; 0x29c <__itoa_ncheck>
 1c8:	8e 01       	movw	r16, r28
 1ca:	0c 5f       	subi	r16, 0xFC	; 252
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
		_delay_ms(500);
		itoa(to_be_send,tempr_in_char,10);
		
		for (char j=0;j<26;j++)
		{
			passon=value[j];
 1ce:	f8 01       	movw	r30, r16
 1d0:	81 91       	ld	r24, Z+
 1d2:	8f 01       	movw	r16, r30
			PORTC=0x0A;
 1d4:	f5 ba       	out	0x15, r15	; 21
			PORTC&=~(1<<4);
 1d6:	ac 98       	cbi	0x15, 4	; 21
 1d8:	ff e5       	ldi	r31, 0x5F	; 95
 1da:	2a ee       	ldi	r18, 0xEA	; 234
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f1 50       	subi	r31, 0x01	; 1
 1e0:	20 40       	sbci	r18, 0x00	; 0
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x7e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x88>
 1e8:	00 00       	nop
			_delay_ms(150);
			PORTC=0x00;
 1ea:	15 ba       	out	0x15, r1	; 21
			PORTC|=(1<<PINC4);//this cause the encoder to be disable
 1ec:	ac 9a       	sbi	0x15, 4	; 21
 1ee:	9f e5       	ldi	r25, 0x5F	; 95
 1f0:	ea ee       	ldi	r30, 0xEA	; 234
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	91 50       	subi	r25, 0x01	; 1
 1f6:	e0 40       	sbci	r30, 0x00	; 0
 1f8:	f0 40       	sbci	r31, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x94>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x9e>
 1fe:	00 00       	nop
			_delay_ms(150);
			PORTC=passon;//as we can send 1 nibble of data so dividing 8 bit into 4 bits and sending
 200:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<4); //setting this bit will make encoder enable as it will be active in active low1
 202:	ac 98       	cbi	0x15, 4	; 21
 204:	2f e5       	ldi	r18, 0x5F	; 95
 206:	3a ee       	ldi	r19, 0xEA	; 234
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0xaa>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xb4>
 214:	00 00       	nop
			_delay_ms(150);
            PORTC=0x00;
 216:	15 ba       	out	0x15, r1	; 21
		    PORTC|=(1<<PINC4);//this cause the encoder to be disable
 218:	ac 9a       	sbi	0x15, 4	; 21
 21a:	ef e5       	ldi	r30, 0x5F	; 95
 21c:	fa ee       	ldi	r31, 0xEA	; 234
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	e1 50       	subi	r30, 0x01	; 1
 222:	f0 40       	sbci	r31, 0x00	; 0
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0xc0>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xca>
 22a:	00 00       	nop
		    _delay_ms(150);
			PORTC=(passon>>4);
 22c:	98 2f       	mov	r25, r24
 22e:	92 95       	swap	r25
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	95 bb       	out	0x15, r25	; 21
			PORTC&=~(1<<4);
 234:	ac 98       	cbi	0x15, 4	; 21
 236:	3f e5       	ldi	r19, 0x5F	; 95
 238:	9a ee       	ldi	r25, 0xEA	; 234
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	31 50       	subi	r19, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e0 40       	sbci	r30, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xdc>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xe6>
 246:	00 00       	nop
		  	_delay_ms(150);
			 PORTC=0x00;
 248:	15 ba       	out	0x15, r1	; 21
		    PORTC|=(1<<PINC4);//this cause the encoder to be disable
 24a:	ac 9a       	sbi	0x15, 4	; 21
 24c:	ff e5       	ldi	r31, 0x5F	; 95
 24e:	2a ee       	ldi	r18, 0xEA	; 234
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f1 50       	subi	r31, 0x01	; 1
 254:	20 40       	sbci	r18, 0x00	; 0
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0xf2>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0xfc>
 25c:	00 00       	nop
		    _delay_ms(150);
			checksum1(passon);
 25e:	0e 94 a8 00 	call	0x150	; 0x150 <checksum1>
			PORTC=value_of_sum;
 262:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <value_of_sum>
 266:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<4);
 268:	ac 98       	cbi	0x15, 4	; 21
 26a:	8f e5       	ldi	r24, 0x5F	; 95
 26c:	9a ee       	ldi	r25, 0xEA	; 234
 26e:	e0 e0       	ldi	r30, 0x00	; 0
 270:	81 50       	subi	r24, 0x01	; 1
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e0 40       	sbci	r30, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x110>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x11a>
 27a:	00 00       	nop
			_delay_ms(150);
			PORTC=0x00;
 27c:	15 ba       	out	0x15, r1	; 21
			PORTC|=(1<<PINC4);//this cause the encoder to be disable
 27e:	ac 9a       	sbi	0x15, 4	; 21
 280:	ff e5       	ldi	r31, 0x5F	; 95
 282:	2a ee       	ldi	r18, 0xEA	; 234
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f1 50       	subi	r31, 0x01	; 1
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x126>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x130>
 290:	00 00       	nop
    {
		initiate();
		_delay_ms(500);
		itoa(to_be_send,tempr_in_char,10);
		
		for (char j=0;j<26;j++)
 292:	0c 15       	cp	r16, r12
 294:	1d 05       	cpc	r17, r13
 296:	09 f0       	breq	.+2      	; 0x29a <main+0x13a>
 298:	9a cf       	rjmp	.-204    	; 0x1ce <main+0x6e>
 29a:	82 cf       	rjmp	.-252    	; 0x1a0 <main+0x40>

0000029c <__itoa_ncheck>:
 29c:	bb 27       	eor	r27, r27
 29e:	4a 30       	cpi	r20, 0x0A	; 10
 2a0:	31 f4       	brne	.+12     	; 0x2ae <__itoa_ncheck+0x12>
 2a2:	99 23       	and	r25, r25
 2a4:	22 f4       	brpl	.+8      	; 0x2ae <__itoa_ncheck+0x12>
 2a6:	bd e2       	ldi	r27, 0x2D	; 45
 2a8:	90 95       	com	r25
 2aa:	81 95       	neg	r24
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__utoa_common>

000002b2 <__utoa_ncheck>:
 2b2:	bb 27       	eor	r27, r27

000002b4 <__utoa_common>:
 2b4:	fb 01       	movw	r30, r22
 2b6:	55 27       	eor	r21, r21
 2b8:	aa 27       	eor	r26, r26
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	aa 1f       	adc	r26, r26
 2c0:	a4 17       	cp	r26, r20
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__utoa_common+0x14>
 2c4:	a4 1b       	sub	r26, r20
 2c6:	83 95       	inc	r24
 2c8:	50 51       	subi	r21, 0x10	; 16
 2ca:	b9 f7       	brne	.-18     	; 0x2ba <__utoa_common+0x6>
 2cc:	a0 5d       	subi	r26, 0xD0	; 208
 2ce:	aa 33       	cpi	r26, 0x3A	; 58
 2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__utoa_common+0x20>
 2d2:	a9 5d       	subi	r26, 0xD9	; 217
 2d4:	a1 93       	st	Z+, r26
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	79 f7       	brne	.-34     	; 0x2b8 <__utoa_common+0x4>
 2da:	b1 11       	cpse	r27, r1
 2dc:	b1 93       	st	Z+, r27
 2de:	11 92       	st	Z+, r1
 2e0:	cb 01       	movw	r24, r22
 2e2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
